name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: '3.8'
          - os: macOS-latest
            python-version: '3.8'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-mock

    - name: Run basic import tests
      run: |
        python -c "import halo_video; print('‚úÖ Package imports successfully')"

    - name: Run unit tests
      run: |
        pytest test_basic.py test_imports.py -v --cov=halo_video --cov-report=term-missing

    - name: Test CLI functionality
      run: |
        python -m halo_video --help
        echo "‚úÖ CLI accessible"

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run flake8
      run: |
        flake8 halo_video/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Check code formatting with black
      run: |
        black --check halo_video/

    - name: Check import sorting with isort
      run: |
        isort --check-only halo_video/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r halo_video/ -f json -o bandit-report.json || true

    - name: Check dependencies for vulnerabilities
      run: |
        pip install -e .
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Verify package
      run: |
        twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install sphinx sphinx-rtd-theme

    - name: Check documentation links
      run: |
        # Check for broken links in markdown files
        if command -v markdown-link-check &> /dev/null; then
          find . -name "*.md" -exec markdown-link-check {} \;
        else
          echo "‚ö†Ô∏è markdown-link-check not available, skipping link validation"
        fi

    - name: Validate README
      run: |
        python -c "
        import re
        with open('README.md', 'r') as f:
            content = f.read()
        
        # Check for required sections
        required_sections = ['Installation', 'Usage', 'Features', 'Documentation']
        for section in required_sections:
            if section.lower() not in content.lower():
                print(f'‚ùå Missing required section: {section}')
                exit(1)
        
        print('‚úÖ README validation passed')
        "

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install package and test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-benchmark

    - name: Run performance benchmarks
      run: |
        # Add performance tests when available
        echo "‚ö° Performance testing framework ready"
        echo "üìä Future: Add video processing benchmarks"
